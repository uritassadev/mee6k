# Default values for meeseecs-box.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global settings
global:
  # Environment variables shared across all services
  env:
    # Database connection settings
    DATABASE_URL: "postgres://meeseecs:secure_password_123@{{ .Release.Name }}-postgresql:5432/meeseecs_box"
    # Redis connection settings
    REDIS_URL: "redis://:redis_password_123@{{ .Release.Name }}-redis-master:6379"
    # RabbitMQ connection settings
    RABBITMQ_URL: "amqp://meeseecs:rabbitmq_password_123@{{ .Release.Name }}-rabbitmq:5672/"

# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
podLabels: {}

# Common security context settings
podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: meeseecs-box.local
      paths:
        - path: /
          pathType: ImplementationSpecific
          service: api-gateway
          port: 8080
  tls: []
  #  - secretName: meeseecs-box-tls
  #    hosts:
  #      - meeseecs-box.local

# API Gateway Service Configuration
apiGateway:
  enabled: true
  replicaCount: 1
  image:
    repository: "meeseecs-box/api-gateway"
    pullPolicy: IfNotPresent
    tag: "latest"
  service:
    type: ClusterIP
    port: 8080
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi
  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
  env: {}
    # Add any service-specific environment variables here

# Runtime Guardian Service Configuration
runtimeGuardian:
  enabled: true
  replicaCount: 1
  image:
    repository: "meeseecs-box/runtime-guardian"
    pullPolicy: IfNotPresent
    tag: "latest"
  service:
    type: ClusterIP
    port: 8081
  resources: {}
  livenessProbe:
    httpGet:
      path: /health
      port: 8081
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /health
      port: 8081
    initialDelaySeconds: 30
    periodSeconds: 10
  # Special security context for runtime guardian
  securityContext:
    privileged: true
  # Mount host volumes for runtime monitoring
  volumes:
    - name: docker-socket
      hostPath:
        path: /var/run/docker.sock
        type: Socket
    - name: host-proc
      hostPath:
        path: /proc
        type: Directory
    - name: host-sys
      hostPath:
        path: /sys
        type: Directory
  volumeMounts:
    - name: docker-socket
      mountPath: /var/run/docker.sock
      readOnly: true
    - name: host-proc
      mountPath: /host/proc
      readOnly: true
    - name: host-sys
      mountPath: /host/sys
      readOnly: true
  env:
    API_GATEWAY_URL: "http://{{ .Release.Name }}-api-gateway:8080"

# Vulnerability Scanner Service Configuration
vulnScanner:
  enabled: true
  replicaCount: 1
  image:
    repository: "meeseecs-box/vuln-scanner"
    pullPolicy: IfNotPresent
    tag: "latest"
  service:
    type: ClusterIP
    port: 8082
  resources: {}
  livenessProbe:
    httpGet:
      path: /health
      port: 8082
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /health
      port: 8082
    initialDelaySeconds: 30
    periodSeconds: 10
  # Mount docker socket for scanning containers
  volumes:
    - name: docker-socket
      hostPath:
        path: /var/run/docker.sock
        type: Socket
  volumeMounts:
    - name: docker-socket
      mountPath: /var/run/docker.sock
      readOnly: true
  env:
    API_GATEWAY_URL: "http://{{ .Release.Name }}-api-gateway:8080"

# PostgreSQL Dependency Configuration
postgresql:
  enabled: true
  auth:
    username: "meeseecs"
    password: "secure_password_123"
    database: "meeseecs_box"
  primary:
    initdb:
      scriptsConfigMap: "{{ .Release.Name }}-postgresql-init"
    persistence:
      enabled: true
      size: 1Gi

# Redis Dependency Configuration
redis:
  enabled: true
  auth:
    password: "redis_password_123"
  master:
    persistence:
      enabled: true
      size: 1Gi

# RabbitMQ Dependency Configuration
rabbitmq:
  enabled: true
  auth:
    username: "meeseecs"
    password: "rabbitmq_password_123"
  persistence:
    enabled: true
    size: 1Gi

# Common settings
nodeSelector: {}
tolerations: []
affinity: {}

# Extra objects to deploy with the release
extraObject: []